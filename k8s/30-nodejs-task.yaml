apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-task-service
spec:
  replicas: 1
  selector: { matchLabels: { app: nodejs-task-service } }
  template:
    metadata: { labels: { app: nodejs-task-service } }
    spec:
      containers:
      - name: nodejs-task-service
        image: docker.io/nassimeelkamari/microservices-nodejs-task-service:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 3000 }]
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef: { name: app-config, key: DB_HOST }
        - name: DB_NAME
          valueFrom:
            configMapKeyRef: { name: app-config, key: DB_NAME }
        - name: DB_USER
          valueFrom:
            configMapKeyRef: { name: app-config, key: DB_USER }
        - name: DB_PASS
          valueFrom:
            secretKeyRef: { name: mysql-secret, key: MYSQL_ROOT_PASSWORD }
        readinessProbe:
          httpGet: { path: /health, port: 3000 }
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet: { path: /health, port: 3000 }
          initialDelaySeconds: 20
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-task-service
spec:
  selector: { app: nodejs-task-service }
  ports: [{ port: 3000, targetPort: 3000 }]
